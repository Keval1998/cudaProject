%%cu
#include<cstdlib>
#include<iostream>
using namespace std;
#include<cuda.h>
#include<stdio.h>

__global__ void histogramKernelShared(int *data,int *bins,long long int N, int N_bins, float *binsnew)
{
	extern __shared__ int s_bins[];
	int tid = blockIdx.x*blockDim.x+threadIdx.x;
	if(threadIdx.x < N_bins)s_bins[threadIdx.x]=0; //  per block bins initialized
	__syncthreads();
	if(tid<N)
	{
		atomicAdd(&s_bins[data[tid]],1); //  per block local histogram
	__syncthreads();
		if(threadIdx.x < N_bins)
	{
			atomicAdd(&bins[threadIdx.x],s_bins[threadIdx.x]);//  add all the local histogram in 1 block
		__syncthreads();
		__shared__ float s_binsnew[256];
        s_binsnew[threadIdx.x]=0.00;
       for(int i=0;i<=threadIdx.x;i++) s_binsnew[threadIdx.x]+=bins[i];//  cummulative addition of array can be done 
																		// after pdf also
      __syncthreads();
       s_binsnew[threadIdx.x]=round((s_binsnew[threadIdx.x]/N)*N_bins-1); // pdf and then scalling with 256-1
			__syncthreads();
       if (s_binsnew[threadIdx.x]>N_bins-1)s_binsnew[threadIdx.x]=N_bins-1;
      __syncthreads();
		binsnew[threadIdx.x] = s_binsnew[threadIdx.x];// equalized histogram
	}
	}
}

__global__ void mapHistogram(int *data,long long int N,float *binsnew)
{
	int tid = blockIdx.x*blockDim.x+threadIdx.x;
	if(tid<N)data[tid]=binsnew[data[tid]]; //  reverse mapping of image vector
}

void init_array(int *a, int N)
{
	for(int i=0;i<N;i++)a[i]=0;
}

void init_arrayf(float *a, int N)
{
	for(int i=0;i<N;i++)a[i]=0;
}

void init_long_array(int *a,long long int N,int N_bins)
{
	for(int i=0;i<N;i++)a[i]=rand()%N_bins;
}

void print_arr(int *arr, int N)
{
	for (int i=0;i<N;i++)
	{
		//if(arr[i]!=0)
			cout<<i<<"->"<<arr[i]<<endl;
	}
	cout<<endl;
}

void print_arrf(float *arr, int N)
{
	for (int i=0;i<N;i++)
	{
		cout<<i<<"->"<<arr[i]<<endl;
	}
	cout<<endl;
}


void print_long_arr(int *arr,long long int N)
{
	for (int i=0;i<N;i++)
	{
		cout<<arr[i]<<" ";
	}
	cout<<endl;
}

void printSum(int *arr,int N)
{
	long long int sum=0;
	for(int i=0;i<N;i++)sum+=arr[i];
	cout<<"Verification of total is: " << sum<<endl;
}

void printSumf(float *arr,int N)
{
	float sum=0.0;
	for(int i=0;i<N;i++)sum+=arr[i];
	cout<<"Verification of total is: " << sum<<endl;
}

int main()
{
	int T=1024,B=1;
	int *Data,N_bins,*bins;
	long long int N = 62500;

	Data = (int *)malloc(62500*sizeof(int));
	B = (N+T-1)/T;
	

	N=0;
	FILE *imgvector = fopen("dat1.txt","r");  //  reading vector from a file dat1.txt
		
	while (fscanf(imgvector,"%d",&Data[N])!=EOF)
	{
			N++;
	}
	fclose(imgvector);
	for(N_bins=256;N_bins<257;N_bins*=2)
	{
		bins = (int *)malloc(N_bins*sizeof(int));
		init_array(bins,N_bins);
		int *dev_Data2,*dev_bins2;
		float *dev_bins22,*bins2;
		bins2 = (float *)malloc(N_bins*sizeof(float));

		init_arrayf(bins2,N_bins);
		cudaMalloc((void**)&dev_Data2,N*sizeof(int));
		cudaMalloc((void**)&dev_bins2,N_bins*sizeof(int));
		cudaMalloc((void**)&dev_bins22,N_bins*sizeof(float));

		cudaMemcpy(dev_Data2, Data , N*sizeof(int),cudaMemcpyHostToDevice);
		cudaMemcpy(dev_bins2, bins , N_bins*sizeof(int),cudaMemcpyHostToDevice);
		cudaMemcpy(dev_bins22, bins2 , N_bins*sizeof(float),cudaMemcpyHostToDevice);
		
			//parameterized shared memory is declared in below line as a third argument of the kernel parameters
						histogramKernelShared<<<B,T,N_bins*sizeof(int)>>>(dev_Data2,dev_bins2,N,N_bins,dev_bins22);
						mapHistogram<<<B,T>>>(dev_Data2,N,dev_bins22);
		
		cudaMemcpy(bins,dev_bins2,N_bins*sizeof(int),cudaMemcpyDeviceToHost);
		cudaMemcpy(bins2,dev_bins22,N_bins*sizeof(float),cudaMemcpyDeviceToHost);
		cudaMemcpy(Data,dev_Data2,N*sizeof(int),cudaMemcpyDeviceToHost);
	
		//print_arr(bins,N_bins);
		//print_arrf(bins2,N_bins);
		//printSumf(bins2,N_bins);
		
		//cout<<endl<<"New Vector:"<<endl;
		//print_long_arr(Data,N);

		int i = 0;
		FILE *eqvector = fopen("dat2.txt","w");
		while(i<62500)
			{		fprintf(eqvector,"%d\n",Data[i]); i+=1; } //  writing output in file dat2.txt
		fclose(eqvector);
	
		cudaFree(dev_Data2);cudaFree(dev_bins2);cudaFree(dev_bins22);
		free(bins2);
	}
	free(Data);free(bins);
	return 0;
}
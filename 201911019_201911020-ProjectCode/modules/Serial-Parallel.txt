/*Below code is to compare values of time of serial and parallel code and it generates vector with values between
0-256 to analyze different problem size

And it prints output with the problemsize, time and speedup

And it also generates output files to do analysis
==================================*/


%%cu
#include<cstdlib>
#include<iostream>
using namespace std;
#include<cuda.h>
#include<stdio.h>

__global__ void histogramKernel(int *data,int *bins,long long int N, int N_bins)
{
	int tid = blockIdx.x*blockDim.x+threadIdx.x;
	if(tid<N)
	{
		atomicAdd(&bins[data[tid]],1);
	}
}

__global__ void histogramKernelShared(int *data,int *bins,long long int N, int N_bins, float *binsnew)
{
	extern __shared__ int s_bins[];
	int tid = blockIdx.x*blockDim.x+threadIdx.x;
	if(threadIdx.x < N_bins)s_bins[threadIdx.x]=0;
	__syncthreads();
	if(tid<N)
	{
		atomicAdd(&s_bins[data[tid]],1);
	__syncthreads();
		if(threadIdx.x < N_bins)
	{
			atomicAdd(&bins[threadIdx.x],s_bins[threadIdx.x]);
		__syncthreads();
		__shared__ float s_binsnew[256];
        s_binsnew[threadIdx.x]=0.00;
       for(int i=0;i<=threadIdx.x;i++) s_binsnew[threadIdx.x]+=bins[i];
      __syncthreads();
       s_binsnew[threadIdx.x]=round((s_binsnew[threadIdx.x]/N)*N_bins-1);
			__syncthreads();
       if (s_binsnew[threadIdx.x]>N_bins-1)s_binsnew[threadIdx.x]=N_bins-1;
      __syncthreads();
		binsnew[threadIdx.x] = s_binsnew[threadIdx.x];
	}
	}
}

__global__ void mapHistogram(int *data,long long int N,float *binsnew)
{
	int tid = blockIdx.x*blockDim.x+threadIdx.x;
	if(tid<N)data[tid]=binsnew[data[tid]];
}

void histEq(int *Data, int N, int *bins, int *Data2)
{
		float binsf[256],binsf2[256];
		for(int i=0;i<256;i++){binsf[i]=0;binsf2[i]=0;}

		for(int i=0;i<N;i++)
    	binsf[Data[i]]+=1.0;
		for (int i=0;i<256;i++)
		{
		binsf[i]/=N;

			for(int j=0;j<=i;j++)
			binsf2[i]+=binsf[j];
		bins[i]=(int)round(binsf2[i]*255);
		 
		}
	

		for(int i=0;i<N;i++)
			Data2[i]=bins[Data[i]];
}

void init_array(int *a, int N)
{
	for(int i=0;i<N;i++)a[i]=0;
}

void init_arrayf(float *a, int N)
{
	for(int i=0;i<N;i++)a[i]=0;
}

void init_long_array(int *a,long long int N,int N_bins)
{
	for(int i=0;i<N;i++)a[i]=rand()%N_bins;
}

void histogram(int *arr, int *bins, long long int N)
{
	for (long long int i=0;i<N;i++)
	{
		bins[arr[i]]++;
	}
}

void print_arr(int *arr, int N)
{
	for (int i=0;i<N;i++)
	{
		//if(arr[i]!=0)
			cout<<i<<"->"<<arr[i]<<endl;
	}
	cout<<endl;
}

void print_arrf(float *arr, int N)
{
	for (int i=0;i<N;i++)
	{
		//if(arr[i]!=0)
			cout<<i<<"->"<<arr[i]<<endl;
	}
	cout<<endl;
}


void print_long_arr(int *arr,long long int N)
{
	for (int i=0;i<N;i++)
	{
		//cout<<"("<<i<<","<<arr[i]<<") ";
		cout<<arr[i]<<" ";
	}
	cout<<endl;
}

void printSum(int *arr,int N)
{
	long long int sum=0;
	for(int i=0;i<N;i++)sum+=arr[i];
	cout<<"Verification of total is: " << sum<<endl;
}

void printSumf(float *arr,int N)
{
	float sum=0.0;
	for(int i=0;i<N;i++)sum+=arr[i];
	cout<<"Verification of total is: " << sum<<endl;
}

int main()
{
	int T=1024,B=1;
	int *Data,N_bins=256,*bins,*Data2;
  bins = (int *)malloc(256*sizeof(int));

	long long int N = 0;
FILE *serTimeEx = fopen("serialTimeExecution.txt","w");
FILE *parTimeEx = fopen("parallelTimeExecution.txt","w");
FILE *speedupEx = fopen("speedup.txt","w");
FILE *exTable = fopen("Execution.txt","w");

	for(N=256;N<134217729;N*=2)
	{
    Data = (int *)malloc(N*sizeof(int));
    Data2 = (int *)malloc(N*sizeof(int));
    init_long_array(Data,N,N_bins);
    init_long_array(Data2,N,N_bins);
		init_array(bins,N_bins);
    B = (N+T-1)/T;
    cudaEvent_t ss,se;
	  float st,st2;

cudaEventCreate(&ss); 
				cudaEventCreate(&se);
				cudaEventRecord(ss);
				cudaDeviceSynchronize();
	        histEq(Data,N,bins,Data2);
				cudaEventRecord(se);
				cudaEventSynchronize(se);
				cudaEventElapsedTime(&st, ss, se);

		int *dev_Data2,*dev_bins2;
		float *dev_bins22,*bins2;
		bins2 = (float *)malloc(N_bins*sizeof(float));

		init_arrayf(bins2,N_bins);
		cudaMalloc((void**)&dev_Data2,N*sizeof(int));
		cudaMalloc((void**)&dev_bins2,N_bins*sizeof(int));
		cudaMalloc((void**)&dev_bins22,N_bins*sizeof(float));

		cudaMemcpy(dev_Data2, Data , N*sizeof(int),cudaMemcpyHostToDevice);
		cudaMemcpy(dev_bins2, bins , N_bins*sizeof(int),cudaMemcpyHostToDevice);
		cudaMemcpy(dev_bins22, bins2 , N_bins*sizeof(float),cudaMemcpyHostToDevice);

		cudaEventCreate(&ss); 
					cudaEventCreate(&se);
					cudaEventRecord(ss);
					cudaDeviceSynchronize();
		
						histogramKernelShared<<<B,T,N_bins*sizeof(int)>>>(dev_Data2,dev_bins2,N,N_bins,dev_bins22);
						mapHistogram<<<B,T>>>(dev_Data2,N,dev_bins22);

					cudaEventRecord(se);
					cudaEventSynchronize(se);
					cudaEventElapsedTime(&st2, ss, se);
		
cout<<N<<"  "<<st<<" "<<st2<<" "<<st/st2<<endl;


fprintf(serTimeEx,"%d\t%f\n",N,st);
fprintf(parTimeEx,"%d\t%f\n",N,st2);
fprintf(speedupEx,"%d\t%f\n",N,st/st2);
fprintf(exTable,"%d\t%f\t%f\t%f\n",N,st,st2,st/st2);

		cudaMemcpy(bins,dev_bins2,N_bins*sizeof(int),cudaMemcpyDeviceToHost);
		cudaMemcpy(bins2,dev_bins22,N_bins*sizeof(float),cudaMemcpyDeviceToHost);
		cudaMemcpy(Data,dev_Data2,N*sizeof(int),cudaMemcpyDeviceToHost);
  
		cudaFree(dev_Data2);cudaFree(dev_bins2);cudaFree(dev_bins22);
		free(bins2);
	}
  fclose(serTimeEx);fclose(parTimeEx);fclose(speedupEx);fclose(exTable);
	free(Data);free(bins);
	return 0;
}